"""
Module Name: cli

Command-line interface (CLI) for the Wikipedia scraper.

This module provides a centralized interface to:
- Configure scraper options
- Handle errors robustly
- Enable structured logging
- Extend the command system (e.g., via integration with Click)

Example:
    >>> wiki --help
"""


import sys
import click
import logging

from pathlib import Path
from typing import Any, NoReturn, List, Optional

from src.wikiscraper import WikiScraper, LanguageNotSupportedError
from src.storage import FileSaver
from src.utils import setup_logging, LoggingSetupError
from src.service.wiki_service import WikiService  # Import WikiService if you intend to use it in CLI


# --- Configuration Constants ---
DEFAULT_LANGUAGE: str = "es" # Default language for Wikipedia searches (Spanish).
DEFAULT_TIMEOUT: int = 15 # Maximum wait time (in seconds) for HTTP requests to the Wikipedia site.
SUPPORTED_LOG_LEVELS = ["DEBUG", "INFO", "WARNING", "ERROR"] # Allowed logging levels to configure the verbosity of messages.
DEFAULT_OUTPUT_DIR = "./output_files" # Default directory where output files generated by the program will be saved.


class CLIError(Exception):
    """
    Custom base exception for specific Command Line Interface (CLI) errors.

    This exception should be used to indicate any error that occurs during the execution of the CLI,
    allowing for more specific error handling and better communication with the user.
    """
    pass


class WikiCLI:
    """
    A class to manage the Command Line Interface (CLI) for the WikiScraper application.

    This class handles the initialization, configuration, and execution of the CLI,
    allowing users to interact with the WikiScraper functionality through command-line arguments.

    Attributes:
        _logger (logging.Logger):  A logger instance used for logging messages within the CLI.
                                  It is intended for dependency injection to enhance testability and control over logging.
        language (str): The language code for Wikipedia searches (ISO 639-1 format, default: 'es').
        timeout (int):  The HTTP timeout in seconds for requests to Wikipedia (default: 15 seconds).
        log_level (str): The configured logging level for the application (default: 'INFO').

    Methods:
        
    Example:
        >>> import logging
        >>> logger = logging.getLogger(__name__) # Or get a configured logger instance
        >>> cli = WikiCLI(logger=logger, language='en', timeout=20, log_level='DEBUG')
    """

    def __init__(
        self,
        logger: logging.Logger,  # Logger dependency injection parameter
        language: str = DEFAULT_LANGUAGE,
        timeout: int = DEFAULT_TIMEOUT,
        log_level: str = "INFO",
    ) -> None:
        """
        Initializes a new WikiCLI instance.

        Args:
            logger (logging.Logger): Logger object for dependency injection.
            language (str, optional): ISO 639-1 language code. Defaults to DEFAULT_LANGUAGE ('es').
            timeout (int, optional): HTTP timeout in seconds. Defaults to DEFAULT_TIMEOUT (15).
            log_level (str, optional): Logging level. Defaults to 'INFO'.

        Raises:
            CLIError: If there is an error in the initial CLI configuration.
        """
        if logger is None:  # Handles case where logger is not injected
            self._logger = logging.getLogger(__name__) # Default logger (not recommended for production)
            self._logger.warning("WikiCLI initialized WITHOUT injected logger. Using default logger. NOT recommended configuration!")
        else:
            self._logger = logger # Uses the INJECTED logger

        self._configure_components(language, timeout, log_level)

    def _configure_components(
        self,
        language: str,
        timeout: int,
        log_level: str
    ) -> None:
        """
        Configures the internal components of the CLI: scraper, file saver, and service.

        This method is responsible for:
            1. Validating the input parameters (language, timeout, log_level).
            2. Initializing and injecting dependencies (logger) into the WikiScraper, FileSaver, and WikiService instances.
            3. Handling potential configuration errors such as invalid language codes or timeout values.

        It uses the injected logger instance (self._logger) for all logging operations.

        Raises:
            CLIError: If any configuration error occurs during component initialization or parameter validation.
                      The error message will provide details about the specific configuration issue.
        """
        logger = self._logger  # Use the INJECTED logger instance (or the default one if injection failed)
        try:
            self._validate_inputs(language, timeout, log_level) # Validate input parameters before component initialization
            self.scraper = WikiScraper(language=language, timeout=timeout, logger=logger) # Initialize WikiScraper, injecting the logger
            self.file_saver = FileSaver(logger=logger) # Initialize FileSaver, injecting the logger
            self.service = WikiService(scraper=self.scraper, file_saver=self.file_saver, logger=logger) # Initialize WikiService, injecting scraper, file_saver, and logger dependencies.
            logger.debug("Components initialized successfully")  # Log successful component initialization using the injected logger
        except (LanguageNotSupportedError, ValueError) as e: # Catch specific exceptions related to configuration errors
            logger.critical(f"Configuration error: {e}", exc_info=True)  # Log critical configuration error with exception details
            raise CLIError(str(e)) from e # Re-raise a CLIError to propagate the configuration failure to the CLI execution level

    def _validate_inputs(
        self,
        language: str,
        timeout: int,
        log_level: str
    ) -> None:
        """
        Validates the input parameters provided to the CLI.

        This method performs the following checks:
            - Language code: Ensures it consists of alphabetic characters only and conforms to the ISO 639-1 standard (2 letters).
            - Timeout value: Verifies it is a positive integer.
            - Log level: Checks if it is one of the supported log levels defined in SUPPORTED_LOG_LEVELS.

        Raises:
            ValueError: If any of the input parameters fail validation. The exception message will specify the invalid parameter and the reason for the failure.
        """
        # Validation logic implementation:
        if not language.isalpha():
            raise ValueError(f"Invalid language code: '{language}'. Must be a 2-letter ISO 639-1 code (e.g., 'es', 'en', 'fr').") # Error for non-alphabetic language code

        if timeout <= 0:
            raise ValueError(f"Invalid timeout: {timeout}. Must be greater than 0.") # Error for non-positive timeout

        if log_level not in SUPPORTED_LOG_LEVELS:
            raise ValueError(f"Invalid log level: '{log_level}'. Must be one of: {SUPPORTED_LOG_LEVELS}") # Error for unsupported log level

    def execute_test_command(self) -> None:
        """
        Executes a simple test command to check if the CLI is functioning correctly.

        This command does the following:
            - Logs an informational message to indicate the start of the test.
            - Prints a stylized "TEST SPOOKY" message to the console using 'click.secho' for colored output.
            - Logs a debug message to indicate successful execution of the test command.

        This method is primarily used for basic health checks of the CLI setup and can be called to quickly
        verify that the CLI is running without errors and that logging is configured as expected.
        """
        logger = self._logger # Use the INJECTED logger instance
        logger.info("Initiating test command...") # Log the start of the test command using the injected logger
        click.secho("🕸️ ", fg="white", nl=False) # Print a white spider web emoji (no newline)
        click.secho(" 👻 ", fg="white", nl=False) # Print a white ghost emoji (no newline)
        click.secho("[ ", fg="magenta", nl=False) # Print a magenta opening bracket (no newline)
        click.secho("TEST SPOOKY", fg="black", bg="yellow", bold=True, nl=False) # Print "TEST SPOOKY" in bold black text on yellow background (no newline)
        click.secho(" ]", fg="magenta", nl=False) # Print a magenta closing bracket (no newline)
        click.secho(" Something has gone horribly... well!", fg="magenta", bold=True, nl=False) # Print humorous message in bold magenta (no newline)
        click.secho(" 🎃🦇", fg="white", nl=True) # Print white pumpkin and bat emojis (with newline, ending the output line)
        logger.debug("Test command executed successfully") # Log successful execution of the test command using the injected logger


    def execute_search_command(self, query: str, limit: int) -> None:
        """
        Executes the search command to find articles on Wikipedia using the WikiService.

        This method performs the following actions:
            1. Logs an informational message indicating the initiation of the search.
            2. Calls the WikiService's 'search_articles' method to perform the actual search.
            3. Processes the search results:
                - If results are found, it prints them to the console in a numbered list with titles highlighted in green.
                - If no results are found, it prints a warning message in yellow to the console and logs a warning.
            4. Handles potential exceptions during the search process, logging an error message and exiting the CLI with an error code if an exception occurs.

        Args:
            query (str): The search term to look for on Wikipedia.
            limit (int): The maximum number of search results to retrieve from the WikiService.

        Raises:
            SystemExit: If an exception occurs during the search operation. The CLI will exit with a status code of 3 to indicate a search command failure.
        """
        logger = self._logger  # Use the INJECTED logger instance for logging
        logger.info(f"Initiating Wikipedia search (via service) for: '{query}' (limit: {limit} results)") # Log the start of the search operation with query and limit

        try:
            search_results = self.service.search_articles(query=query, limit=limit) # Call the WikiService to perform the article search
            if search_results: # Check if search_results object contains any results (truthy if results are present)
                click.secho(f"Search results for '{query}':", fg="green", bold=True) # Print a header for the search results in green and bold
                for i, search_result in enumerate(search_results): # Iterate through the SearchResults object (assuming it's iterable)
                    click.echo(f"{i+1}. {search_result.title}") # Print each search result with an index and its title
            else:
                click.secho(f"No results found for '{query}'.", fg="yellow") # Print a message in yellow indicating no results were found
                logger.warning(f"No results found for '{query}'. Service returned no results for '{query}'.") # Log a warning message indicating no search results from the service
        except Exception as e: # Catch any exception that might occur during the service call or result processing
            logger.error(f"Error during search (via service) for '{query}': {e}", exc_info=True) # Log a detailed error message with exception info
            click.secho(f"❌ Error performing search: {e}", fg="red", bold=True, err=True) # Print an error message to the console in red and bold
            sys.exit(3) # Exit the CLI with an error code to indicate search command failure


          
    def execute_get_command(self, query: str, save: bool) -> None:
        """
        Executes the 'get' command to retrieve and display the text content of a Wikipedia page.

        This command searches for a Wikipedia page based on the provided query and retrieves
        the raw text content of the first matching page using the WikiService.

        The method performs the following steps:
            1. Logs an informational message indicating the start of the 'get' command.
            2. Uses the WikiService to fetch the raw content of the Wikipedia article corresponding to the query.
            3. Handles different scenarios based on the outcome of the content retrieval:
                - If no page is found for the query, it displays a warning message.
                - If the page content is successfully retrieved, it displays the title and the content in the console.
                - If the 'save' flag is True, it attempts to save the content to a file using FileSaver.
                - If there's an issue retrieving the page text, it displays a warning message.
            4. Manages potential exceptions during the process, logging errors and exiting the CLI in case of failure.

        Args:
            query (str): The search term to find the Wikipedia page for.
            save (bool): A flag to indicate whether to save the retrieved content to a file.
                           If True, the content will be saved; otherwise, it will only be displayed.

        Raises:
            SystemExit: If an error occurs during the 'get' command execution.
                        The CLI will exit with a status code of 3 to indicate a command failure.
        """
        logger = self._logger # Use the injected logger instance
        logger.info(f"Initiating 'get' command to search and retrieve Wikipedia page for: '{query}'") # Log the start of the 'get' command

        try:
            # Use the service to get the article raw content using WikiService
            article_content = self.service.get_article_raw_content(query=query)

            if not article_content.title: # Check if an article title was retrieved (indicates page found)
                click.secho(f"No pages found for the search query: '{query}'.", fg="yellow") # Inform user no page was found
                return # Exit the command if no page found

            if article_content.content: # Check if article content was successfully retrieved
                click.secho(f"Text content of page '{article_content.title}':", fg="green", bold=True) # Display page title in green and bold
                click.echo(article_content.content) # Output the retrieved article content to the console
                logger.info(f"Text content of page '{article_content.title}' displayed successfully.") # Log successful display of content

                # Saving functionality is handled within the CLI method
                if save: # Check if the 'save' flag is True
                    logger.info(f"Save option provided. Saving page using FileSaver...") # Log that saving process is starting
                    try:
                        saved_path = self.file_saver.save(content=article_content.content, title=article_content.title) # Call FileSaver to save the content
                        click.secho(f"Page saved", fg="green") # Inform user page was saved successfully
                        logger.info(f"Page '{article_content.title}' saved successfully") # Log successful save operation
                    except Exception as save_error: # Catch any exceptions during the save operation
                        logger.error(f"Error saving page using FileSaver: {save_error}", exc_info=True) # Log detailed save error
                        click.secho(f"❌ Error saving page using FileSaver: {save_error}", fg="red", bold=True, err=True) # Display error message to the user

            else: # If article content is empty or None (but title exists, meaning page was found but content not retrieved)
                click.secho(f"Could not retrieve text content for page '{article_content.title}'.", fg="yellow") # Inform user content retrieval failed
                logger.warning(f"Could not retrieve text content for page '{article_content.title}'.") # Log warning about content retrieval failure

        except Exception as e: # Catch any exceptions during the overall 'get' command execution (service call, etc.)
            logger.error(f"Error during 'get' command for '{query}': {e}", exc_info=True) # Log detailed error information for 'get' command
            click.secho(f"❌ Error getting page for '{query}': {e}", fg="red", bold=True, err=True) # Display general error message to the user
            sys.exit(3) # Exit CLI with error code to indicate 'get' command failure


    def execute_map_command(self, query: str, depth: int) -> None:
        """
        Executes the map command to explore and display a tree of linked pages from Wikipedia using the WikiService.

        This method performs the following actions:
            1. Logs an informational message indicating the initiation of the page mapping.
            2. Calls the WikiService's 'map_page_links' method to retrieve a tree of linked pages starting from the given query.
            3. Processes the page tree:
                - If a root node is found (meaning pages were mapped), it prints the tree structure to the console using the '_print_tree' method.
                - If no root node is found (no pages mapped), it prints a warning message in yellow to the console and logs a warning.
            4. Handles potential PageMappingServiceError exceptions during the mapping process, logging an error message and exiting the CLI with an error code if an exception occurs.

        Args:
            query (str): The title of the Wikipedia page to start mapping links from.
            depth (int): The maximum depth of links to explore in the page mapping.

        Raises:
            SystemExit: If a PageMappingServiceError occurs during the mapping operation. The CLI will exit with a status code of 3 to indicate a map command failure.
        """
        logger = self._logger  # Use the INJECTED logger instance
        logger.info(f"Initiating page links mapping (via service) for: '{query}' (depth: {depth})") # Log the start of the mapping operation

        try:
            page_tree = self.service.map_page_links( # Call the WikiService to perform page mapping
                root_title=query,
                max_depth=depth
            )

            if page_tree.root: # Check if a root node exists, indicating successful mapping
                click.secho(f"Page links map for '{query}':", fg="green", bold=True) # Print a header for the map output
                self._print_tree(page_tree.root) # Print the page tree recursively
            else:
                click.secho(f"No results found for page links mapping starting from '{query}'.", fg="yellow") # Print a warning message if no results
                logger.warning(f"No results found for page links mapping. Service returned no root for query '{query}'.") # Log a warning message

        except Exception as e: # Catch specific PageMappingServiceError
            logger.error(f"Error during page links mapping (via service) for '{query}': {e}", exc_info=True) # Log detailed error with exception info
            click.secho(f"❌ Error performing page links mapping: {e}", fg="red", bold=True, err=True) # Print error message to console in red and bold
            sys.exit(3) # Exit the CLI with an error code to indicate map command failure


    def _print_tree(self, node: Any, indent: int = 0) -> None: # Assuming PageNode is forward-referenced or imported
        """Prints the page tree recursively with formatting."""
        prefix = "  " * indent + "- "
        click.secho(prefix + node.title, fg="blue" if indent == 0 else "white") # Highlight root node in blue

        for child in node.children.values():
            self._print_tree(child, indent + 1) # Recursive call for child nodes




@click.group()
@click.option(
    "--language",
    "-l",
    default=DEFAULT_LANGUAGE,
    show_default=True,
    help="ISO 639-1 language code for Wikipedia (e.g., 'es', 'en', 'fr'). Determines the language of Wikipedia pages to be scraped."
)
@click.option(
    "--timeout",
    type=click.IntRange(1, 300),
    default=DEFAULT_TIMEOUT,
    show_default=True,
    help="HTTP timeout in seconds (1-300).  Sets the maximum time to wait for responses from Wikipedia servers."
)
@click.option(
    "--verbose",
    "-v",
    default="INFO",
    show_default=True,
    type=click.Choice(SUPPORTED_LOG_LEVELS),
    help=f"Verbosity level for logging: {SUPPORTED_LOG_LEVELS}.  Controls the amount of log output generated by the application. Options are: {SUPPORTED_LOG_LEVELS}."
)
@click.pass_context
def cli(ctx: click.Context, language: str, timeout: int, verbose: str) -> None:
    """
    Main entry point for the command-line interface (CLI) application.

    This function serves as the central point for setting up and running the CLI. It performs the following actions:
        1. Configures the logging system: Initializes logging to capture application events and errors, based on the specified verbosity level.
        2. Initializes the WikiCLI instance: Creates an instance of the main CLI class (`WikiCLI`), passing in configuration parameters (language, timeout, log level, and logger).
        3. Stores WikiCLI in Click context: Makes the initialized `WikiCLI` object available to all subcommands by storing it in Click's context object (`ctx.obj`). This enables subcommands to access and use the configured CLI instance.
        4. Handles potential startup errors: Includes comprehensive error handling for issues during logging setup, language support, or CLI configuration, ensuring informative error messages are displayed to the user and the application exits gracefully in case of failures.

    This function is decorated with `@click.group()`, making it the root command of the CLI, and with `@click.option()` to define global command-line options that are available to all subcommands.

    Args:
        ctx (click.Context): Click context object, automatically passed by Click when the command is invoked. Used to store and pass objects between commands.
        language (str): Language code for Wikipedia, obtained from the '--language' or '-l' command-line option.
        timeout (int): HTTP timeout value in seconds, obtained from the '--timeout' command-line option.
        verbose (str): Logging verbosity level, obtained from the '--verbose' or '-v' command-line option.
    """
    project_root = Path(__file__).resolve().parent.parent.parent # Determine the project root directory based on the location of this script file.
    setup_logging(project_root=project_root, log_level=verbose.upper()) # Initialize the logging system with the specified log level and project root. Log level is configurable via CLI option '--verbose'.
    logger = logging.getLogger(__name__) # Get a logger instance for this module ('cli').  This logger will be used for logging messages within this function and potentially passed to other components.
    try:
        # Centralized logging configuration is now handled by setup_logging function called above.

        # 5. Retrieve the logger instance AFTER the logging system has been fully configured by setup_logging().

        # Configuration of the execution context for the CLI application.
        ctx.obj = WikiCLI( # Instantiate the main CLI class, WikiCLI. This object will manage the CLI's operations.
            language=language, # Pass the language code obtained from command-line arguments to WikiCLI.
            timeout=timeout, # Pass the timeout value obtained from command-line arguments.
            log_level=verbose.upper(), # Pass the log level (converted to uppercase) obtained from command-line arguments.
            logger=logger # Pass the logger instance to WikiCLI for dependency injection, allowing WikiCLI and its components to use the configured logging system.
        )

        logger.debug(  # Log a debug message to confirm successful CLI initialization and configuration.
            f"CLI initialized: language='{language}', timeout={timeout}s, log_level='{verbose}'"
        )

    except LoggingSetupError as e: # Catch exceptions that might occur during the logging setup process.
        click.secho(f"🚨 Error configuring logging: {e}", fg="red", bold=True, err=True) # Display a user-friendly error message in red indicating a logging setup failure.
        sys.exit(1) # Exit the CLI application with an error code of 1 to indicate failure during startup.
    except LanguageNotSupportedError as e: # Handle specific exception for unsupported language codes.
        click.secho(f"🌎 Language not supported: {e}. Please choose a valid language for Wikipedia.", fg="yellow", bold=True, err=True) # Inform user about unsupported language and suggest choosing a valid one.
        sys.exit(1) # Exit with error code 1 for language configuration issues.
    except CLIError as e: # Catch custom CLI configuration errors defined in CLIError class.
        click.secho(f"⚙️ CLI configuration error: {e}", fg="red", bold=True, err=True) # Display error message for general CLI configuration problems.
        sys.exit(1) # Exit with error code 1 for general CLI configuration failures.
    except Exception as e: # Catch any other unexpected exceptions that might occur during CLI initialization.
        logging.getLogger(__name__).error("Unexpected error during CLI initialization", exc_info=True) # Log a detailed error message with full exception information using the module's logger.
        click.secho( # Display a generic, but informative, error message to the user in yellow for unexpected failures.
            f"🔥 Unexpected error in CLI: {e}",
            fg="yellow",
            bold=True,
            err=True
        )
        sys.exit(2) # Exit with error code 2 to differentiate unexpected errors from configuration errors (code 1).


@cli.command()
@click.pass_context
def test(ctx: click.Context) -> None:
    """
    Executes a test command to verify the basic installation and configuration of the CLI application.

    This command is designed as a simple health check to ensure that the CLI is set up correctly
    and that the core components are functioning as expected. It invokes the `execute_test_command`
    method of the `WikiCLI` instance, which performs a basic internal test and prints a stylized message to the console.

    Functionality:
        - Retrieves the `WikiCLI` instance from the Click context object (`ctx.obj`). This instance was initialized in the root `cli()` function and is passed down to subcommands via the context.
        - Calls the `execute_test_command()` method of the `WikiCLI` instance. This method encapsulates the actual test logic.
        - Handles potential exceptions that may occur during the test command execution, logging the error and displaying a user-friendly error message on the console.
        - Exits the CLI with an error code if the test command fails, indicating a problem with the CLI setup.

    This command is useful for:
        - Initial setup verification: After installing the CLI, running `test` can quickly confirm if the basic setup is working.
        - Debugging environment issues: If other commands are failing, `test` can help isolate whether the problem is with the core CLI setup itself or with specific command logic.

    Error Handling:
        - If any exception occurs during the execution of the test command, it is caught.
        - An error message is logged using the application's logger to capture detailed error information (including traceback).
        - A user-facing error message is displayed on the console in red, indicating that the test command has failed.
        - The CLI application exits with a status code of 3 to signal a test command failure.

    Accessing Dependencies:
        - The logger instance and the `WikiCLI` object are accessed from the Click context (`ctx.obj`). This leverages Click's context to manage and pass dependencies down to commands in a structured way.
        - `ctx.obj._logger` retrieves the logger instance that was injected into `WikiCLI` during initialization. This ensures that the test command uses the same configured logger as the rest of the application.
    """
    logger = ctx.obj._logger  # Get the logger instance from the WikiCLI object stored in Click's context (dependency injection in action)
    try:
        cli_instance: WikiCLI = ctx.obj # Retrieve the WikiCLI instance from Click's context
        cli_instance.execute_test_command() # Call the execute_test_command method on the WikiCLI instance to perform the test
    except Exception as e: # Catch any exceptions that might occur during the execution of the test command
        logger.error("Error during test command", exc_info=True) # Log a detailed error message with exception information using the application's logger
        click.secho( # Display a user-friendly error message on the console to inform the user about the test failure
            f"❌ Test command failed: {e}",
            fg="red",
            bold=True,
            err=True
        )
        sys.exit(3) # Exit the CLI application with an error code of 3 to indicate that the test command has failed


@cli.command()
@click.argument('query', type=str)
@click.option('--limit', '-l', type=click.IntRange(1, 10), default=5, show_default=True, help="Maximum number of search results (1-10). Limits the number of search results displayed.")
@click.pass_context
def search(ctx: click.Context, query: str, limit: int) -> None:
    """
    Searches for Wikipedia pages based on a query string.

    This command allows users to search for articles on Wikipedia by providing a search query.
    It leverages the WikiService to perform the search and displays the titles of the found articles.

    Functionality:
        - Takes a 'query' string as an argument, which is the term to search for on Wikipedia.
        - Uses an optional '--limit' option to control the maximum number of search results to be displayed.
        - Retrieves the `WikiCLI` instance from the Click context to access the application's services and configurations.
        - Calls the `execute_search_command` method of the `WikiCLI` instance to perform the search operation.
        - Displays the search results in the console, listing the titles of the articles found.
        - Handles potential errors during the search process, logging error details and displaying an error message to the user.
        - Exits the CLI with an error code if the search command fails.

    Arguments:
        query (str): The search term to look for on Wikipedia. This is a required argument for the 'search' command.

    Options:
        --limit, -l (int):  Maximum number of search results to display (range: 1-10, default: 5).
                            This option allows users to limit the number of search results returned by the query.

    Context:
        - The `WikiCLI` instance is accessed from the Click context (`ctx.obj`). This instance provides access to the configured services, logger, and other CLI functionalities.
        - The logger instance is also retrieved from `ctx.obj` for logging any errors during the command execution.

    Error Handling:
        - If any exception occurs during the search command execution, it is caught.
        - A detailed error message is logged using the application's logger.
        - A user-friendly error message is displayed on the console in red, indicating that the search command has failed.
        - The CLI application exits with a status code of 3 to signal a search command failure.
    """
    logger = ctx.obj._logger  # Get the logger from ctx.obj (now DI-aligned at command level)
    try:
        cli_instance: WikiCLI = ctx.obj
        cli_instance.execute_search_command(query, limit)
    except Exception as e:
        logger.error("Error during search command", exc_info=True)
        click.secho(
            f"❌ Search command failed: {e}",
            fg="red",
            bold=True,
            err=True
        )
        sys.exit(3)


@cli.command()
@click.argument('query', type=str)
@click.option('--save', '-s',
              is_flag=True,
              default=False,
              help="Saves the output to a file instead of displaying it in the console.")
@click.pass_context
def get(ctx: click.Context, query: str, save: bool) -> None:
    """
    Retrieves and displays the text content of a Wikipedia page, optionally saving it to a file.

    This command fetches the raw text content of the first Wikipedia page that matches the provided
    search query. The output can be displayed directly in the console or saved to a file in a default
    output directory, controlled by the `--save` option.

    If the `--save` option is not used, the page content is printed to standard output.
    When the `--save` option (or `-s` shorthand) is used, the content is saved to a file within
    a predefined output directory.

    \b
    Examples:
        wiki get <query>              # Displays Wikipedia page content in the console.
        wiki get <query> --save         # Saves the content to a file in the default output directory.
        wiki get <query> -s            # (Short form) Saves content to file in default output directory.

    Arguments:
        query (str): The search term to find the Wikipedia page and retrieve its content.
                     This is a required argument.

    Options:
        --save, -s:          A flag that, when present, instructs the command to save the retrieved
                             Wikipedia page content to a file. If not present, the content is displayed
                             in the console. Defaults to not saving (displaying in console).

    Context:
        - The `WikiCLI` instance is obtained from the Click context (`ctx.obj`), providing access
          to application services, configuration, and the logger.
        - The logger is also retrieved from `ctx.obj` for logging any errors during command execution.

    Error Handling:
        - If any exception occurs during the 'get' command execution, it is caught.
        - A detailed error message is logged using the application's logger.
        - A user-friendly error message is displayed in red on the console to indicate command failure.
        - The CLI application exits with a status code of 3 if the command fails.
    """
    logger = ctx.obj._logger  # Get the logger from ctx.obj (now DI-aligned at command level)

    try:
        cli_instance: click.Context = ctx.obj #  Assuming ctx.obj contains the WikiCLI instance
        # Now pass 'save' instead of 'output_dir'
        cli_instance.execute_get_command(query, save) #  Saving logic handled in execute_get_command

    except Exception as e:
        logger.error("Error during get command", exc_info=True)
        click.secho(
            f"❌ Get command failed: {e}",
            fg="red",
            bold=True,
            err=True
        )
        sys.exit(3)

@cli.command()
@click.argument('query', type=str)
@click.option(
    '--depth',
    '-d',
    type=click.IntRange(0, 10),
    default=1,
    show_default=True,
    help="Mapping depth (levels of links to follow).  Defines the recursion depth for exploring internal Wikipedia links."
)
@click.pass_context
def map(ctx: click.Context, query: str, depth: int) -> None:
    """
    Recursively maps internal links of a Wikipedia page, visualizing the link structure up to a specified depth.

    This command initiates a recursive exploration of internal links starting from a given Wikipedia page title ('query').
    It traverses the internal links of the page and, for each linked page, continues to explore its internal links, up to
    the depth specified by the '--depth' option. The result is a hierarchical, tree-like representation of the internal
    link structure, printed to the console, showing the interconnectedness of Wikipedia pages based on internal links.

    The '--depth' option controls the recursion level. A depth of 1 will only map links from the initial page,
    depth 2 will map links from the initial page and then links from those linked pages, and so on.  A depth of 0 is not meaningful
    as it would not explore any links.

    \b
    Examples:
        wiki map <query>                # Maps internal links of the page specified by <query> to a depth of 1 (default depth).
        wiki map <query> --depth 2       # Maps internal links to a depth of 2, exploring links from linked pages.
        wiki map <query> -d 3          # (Short form) Maps internal links to a depth of 3, going even deeper into the link structure.

    Arguments:
        query (str): The title of the Wikipedia page to start mapping internal links from.
                     This is the starting point for the link exploration.

    Options:
        --depth, -d (int):  The depth of recursion for mapping internal links (range: 0-10, default: 1).
                            Controls how many levels of internal links are explored. A higher depth value
                            results in a more extensive link map but may take longer to generate and produce
                            a larger output.  Depth must be between 0 and 10, inclusive.

    Context:
        - The `WikiCLI` instance is retrieved from the Click context (`ctx.obj`), providing access to the
          application's services, configuration settings, and the logging system.
        - The logger is accessed from `ctx.obj._logger` to log any messages or errors during command execution.

    Error Handling:
        - If any exception occurs during the 'map' command execution (e.g., network issues, scraper errors),
          it is caught.
        - Detailed error information, including exception tracebacks, is logged using the application's logger.
        - A user-friendly error message, indicating the 'map' command failure, is displayed on the console in red.
        - The CLI application exits with a status code of 3 to signal that the 'map' command has failed.
    """
    logger = ctx.obj._logger  # Get the logger from ctx.obj (now DI-aligned at command level)
    try:
        cli_instance: WikiCLI = ctx.obj
        cli_instance.execute_map_command(query, depth)
    except Exception as e:
        logger = ctx.obj._logger  # Get the logger from ctx.obj (now DI-aligned at command level)
        logger.error("Error during map command", exc_info=True)
        click.secho(
            f"❌ Map command failed: {e}",
            fg="red",
            bold=True,
            err=True
        )
        sys.exit(3)



def main() -> None:
    """
    Main function serving as the entry point of the program, responsible for handling the execution of the CLI.

    This function is the top-level function that is called when the script is run. It initializes and runs the
    command-line interface (CLI) defined by the `cli` function. It also includes global error handling for
    user cancellations (KeyboardInterrupt) and any unhandled exceptions that might occur during the CLI execution.

    Functionality:
        - Invokes the `cli()` function, which sets up and runs the Click-based command-line interface.
        - Implements a try-except block to catch and handle potential exceptions during CLI execution.
        - Specifically handles `KeyboardInterrupt` exceptions, which are raised when the user presses Ctrl+C to cancel
          the operation. In this case, it prints a user-friendly cancellation message and exits gracefully.
        - Catches any other `Exception` that is not explicitly handled elsewhere in the application. For these unhandled
          exceptions, it logs a critical error message with detailed exception information and displays a prominent
          error message to the user on the console before exiting with an error code.

    Error Handling:
        - KeyboardInterrupt: Catches user-initiated cancellation (Ctrl+C), displays a yellow cancellation message, and exits with status code 0 (normal exit).
        - Unhandled Exceptions (Exception): Catches any other unexpected errors, logs a critical error with traceback, displays a red error message to the user, and exits with status code 4 (unhandled error).

    Exit Codes:
        - 0: Normal exit, used when the user cancels the operation with KeyboardInterrupt.
        - 4: Error exit, used for unhandled exceptions in the main application flow.  This code indicates a critical, unexpected error occurred.

    Logging:
        - In case of unhandled exceptions, a critical level log message is recorded, including full exception information (traceback), which is crucial for debugging and diagnosing unexpected issues in the application.
    """
    try:
        cli() # Execute the main command-line interface function, defined by @click.group() decorator.
    except KeyboardInterrupt: # Catch the KeyboardInterrupt exception, typically raised when user presses Ctrl+C.
        click.secho("\n🔴 Operation cancelled by user.", fg="yellow") # Display a yellow message to the user indicating cancellation.
        sys.exit(0) # Exit the program with a normal exit code (0) indicating user cancellation.
    except Exception as e: # Catch any other exceptions that are not specifically handled elsewhere in the application flow.
        logging.getLogger(__name__).critical("Unhandled error in main", exc_info=True) # Log a critical error message with full exception details (traceback) using the module's logger.
        click.secho( # Display a prominent error message to the user in red to indicate an unhandled application error.
            f"⛔ Unhandled error in the application: {e}",
            fg="red",
            bold=True,
            err=True
        )
        sys.exit(4) # Exit the program with an error exit code (4) to indicate an unhandled error condition.


if __name__ == "__main__":
    main() # Conditionally execute the main function only when the script is run directly (not imported as a module).